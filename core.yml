---
# This script does some universal setup on the targeted machine(s).
# It installs python, creates ansible and manual maintenance users,
# and tightens SSH security settings.

- name: Install python
  import_playbook: raw-python.yml

- hosts: all
  become: yes
  become_user: root
  become_method: sudo
  gather_facts: yes

  vars_files:
    - vars/ssh_keys.yml

  tasks:
  - name: Set up the ansible user
    include_role:
      name: admin-user-setup
    vars:
      username: 'ansible'
      passwordless_sudo: true
      user_ssh_keys: '{{ ssh_keys }}'


  - name: Set up the manual maintenance user
    include_role:
      name: admin-user-setup
    vars:
      username: 'maintenance'
      passwordless_sudo: true
      # Named differently as workaround for https://github.com/ansible/ansible/issues/8603
      user_ssh_keys: '{{ ssh_keys }}'


  - name: Install dotfiles for the maintenance user
    include_role:
      name: dotfiles
    vars:
      username: 'maintenance'


  - name: Set up SSHD
    include_role:
      name: configure-sshd


  - name: Install mosh
    include_role:
      name: mosh

  - name: Configure unattended upgrades
    include_role:
      name: jnv.unattended-upgrades
    vars:
      unattended_clean_interval: 7
      unattended_automatic_reboot_time: 02:00

  - name: Set the system hostname if requested
    hostname:
      name: '{{ hostname }}'
    when: hostname is defined

  - name: Set up locales
    include_role:
      name: locales
    vars:
      locales_present: [en_US.UTF-8, en_GB.UTF-8, de_DE.UTF-8]
      #I use a funky one here to get English as the system language with europoor measurements, currency etc.
      locales_default:
        lang: en_US.UTF-8
        language: en_US.UTF-8
        lc_address: de_DE.UTF-8
        lc_collate: en_US.UTF-8
        lc_ctype: de_DE.UTF-8
        lc_identification: de_DE.UTF-8
        lc_measurement: de_DE.UTF-8
        lc_messages: en_US.UTF-8
        lc_monetary: de_DE.UTF-8
        lc_name: de_DE.UTF-8
        lc_numeric: de_DE.UTF-8
        lc_paper: de_DE.UTF-8
        lc_response: en_US.UTF-8
        lc_telephone: de_DE.UTF-8
        # 24-hour clock with English weekdays/months
        lc_time: en_GB.UTF-8

  - name: Get username of the user running the playbook
    when: remove_provision_user is defined and remove_provision_user
    become: false
    command: whoami
    register: provision_user
    changed_when: false

  - name: Remove the provisioning user if requested
    when:
      - remove_provision_user is defined
      - remove_provision_user == True
    user:
      name: '{{ provision_user.stdout }}'
      state: absent
      remove: yes
...
